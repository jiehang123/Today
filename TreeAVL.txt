本文主题：平衡二叉树讲解与实现

平衡二叉树特点：
	1、非叶子节点最多拥有两个子节点；
	2、父节点值大于左边子节点、小于右边子节点；
	3、树的左右两边的高度相差不会大于1;
	4、没有值相等的节点;

Rebalance:平衡调整
	AVL树的调整过程很类似于数学归纳法，每次在插入新节点之后都会找到离新插入节点最近的非平衡节点，然后对其进行旋转操作以使得树中的每个节点都处于平衡状态。

LL:在一个节点的左子数的左子数上插入一个新节点，需要将节点右旋（左旋和右旋我没搞懂，反正我就是按照下面这个思路来调整的，下面我不说右旋左旋，只说LL型，RR型），如下：
	     A                  B
	    /                 /   \
	   B                 C     A
	  /
	 C
此时，需要调整的节点只有B和A，方法：首先将B当作根节点，B的右节点移动到A的左节点上，A节点移动到B的右节点上，代码如下：
private AVLNode<T> singleRotateLeft(AVLNode<T> temNode) {  //因为是A没有达到平衡，这里的TemNode就是A节点
	AVLNode<T> temRootNode = temNode.left; 	//将A的左节点，即B节点当作一个新的跟节点
	temNode.left = temRootNode.right; 		//将B的右节点放到A的左节点上
	temRootNode.right = temNode; 			//将A节点移动到B的右节点上
	temNode.height = Math.max(getHeight(temNode.left), getHeight(temNode.right)) + 1; //重新计算A节点的高度
	temRootNode.height = Math.max(getHeight(temRootNode.left), temNode.height) + 1;  //重新计算B节点的高度
	return temRootNode; 返回一个平衡树的根节点，即 B节点
}


RR:在一个节点的左子数的左子数上插入一个新节点，如下：
	 A                    B
	  \                 /   \
	   B               A     C
	    \
	     C
此时，需要调整的节点只有B和A，方法：首先将B当作根节点，B的左节点移动到A的右节点上，A节点移动到B的左节点上，代码如下：
private AVLNode<T> singleRotateRight(AVLNode<T> temNode) {  //因为是A没有达到平衡，这里的TemNode就是A节点
	AVLNode<T> temRootNode = temNode.right; 	//将A的右节点，即B节点当作一个新的跟节点
	temNode.right = temRootNode.left; 		//将B的左节点放到A的右节点上
	temRootNode.left = temNode; 			//将A节点移动到B的左节点上
	temNode.height = Math.max(getHeight(temNode.left), getHeight(temNode.right)) + 1; //重新计算A节点的高度
	temRootNode.height = Math.max(temNode.height, tgetHeight(temRootNode.right)) + 1;  //重新计算B节点的高度
	return temRootNode; 返回一个平衡树的根节点，即 B节点
}

LR:在一个节点的左子数的右子数上插入一个新节点，如下：
	     A               A                C
	    /               /               /   \
	   B               C               B     A
	    \	 	 /
	     C		B
此时，A、B、C三个节点都需要调整，方法：首先调整B和C的位置，即将B节点RR型变换，再将A节点LL型变换，代码如下：
private AVLNode<T> doubleRotateWithLeft(AVLNode<T> temNode) {  //因为是A没有达到平衡，这里的TemNode就是A节点
	temNode.left = singleRotateRight(temNode.left);		//先根据RR方法调整B及其子节点，把A转换成LL型
	return singleRotateLeft(temNode);					//再对A进行 LL型调整
}

RL:在一个节点的左子数的右子数上插入一个新节点，需要将节点，如下：
	     A               A                C
	      \               \             /   \
	       B               C           A     B
	      /			\
	     C			 B
此时，A、B、C三个节点都需要调整，方法：首先调整B和C的位置，即将B节点LL型变换，再将A节点RR型变换，代码如下：
private AVLNode<T> doubleRotateWithRight(AVLNode<T> temNode) {  //因为是A没有达到平衡，这里的TemNode就是A节点
	temNode.right = singleRotateLeft(temNode.right);	//先根据RR方法调整B及其子节点，把A转换成RR型
	return singleRotateRight(temNode);					//再对A进行 RR型调整
}

代码实现如下：
https://github.com/jiehang123/JavaDataStructures/tree/master/src/main/java/com/jiehang/tree/avl

