本文主题：redis基本命令讲解

本文约定对于所有命令的解释与示例模板
命令 : 解释 [eg. 命令示例 : 示例解释]

redis有五种数据结构：STRING(字符串), LIST(列表), SET(集合), HASH(散列), ZSET(有序集合)

KEYS * : 查看所有key
SELECT index : 切换redis数据库 eg. select 5 : 将当前数据库切换到数据库5


STRING下的所有命令
SET key value : 设置存储在给定键中的值 eg. SET hello world : 设置hello的值为world
GET key value : 获取存储在给定键中的值 eg. GET hello : 这里会输出world
DEL key [key ...] : 删除存储在给定键中的值，这个命令可以用于所有类型 eg. DEL hello ：这里会删除 hello world这个键值对
INCR key : 将键存储的值加1，如果当前键不存在，会被当做0处理，并在0基础上加1
DECR key : 与INCR相反，减去不存在的键，会得到-1
INCRBY key increment : 与INCR类似，这里只是指定了加的数量
DECRBY key increment : 与INCRBY类似
INCRBYFLOAT key increment : 与INCRBY类似，这里只是加上一个浮点数


LIST下的所有命令
LPUSH key value [value ...] : 将给定值推入列表的左侧
RPUSH key value [value ...] : 将给定值推入列表的右侧
LPOP key : 从列表的左侧弹出一个值，并返回这个被弹出的值
RPOP key : 从列表的右侧弹出一个值，并返回这个被弹出的值
LRANGE key start stop : 下标从零开始，从左起获取列表在给定范围上的所有值，包括start和stop，如果start为0,stop为-1，则可以取出所有值。
RRANGE key start stop : 与LRANGE相对应。


SET下的所有命令
SADD key value [value ...] : 将给定元素添加到集合
SMEMBERS key : 返回集合包含的所有元素
SISMEMBER key value : 检查给定元素是否存在于集合中
SREM key value [value ...] : 如果给定元素存在于集合中，那么移除这个元素


HASH下的所有命令
HSET key field value : 在散列里面关联起给定的键值对
HGET key field : 获取指定散列键的值
HGETALL key : 获取散列包含的所有键值对
HDEL key field : 如果给定键存在散列中，那么移除这个键值


ZSET下的所有命令
ZADD key score member [score member ...]: 将一个带有给定分值的成员添加到有序集合里面
ZRANGE key start stop : 根据元素在有序排列中所处的位置，从有序集合里面获取多个元素
ZRANGEBYSCORE key min max : 获取有序集合在给定分值内的所有元素
ZREM key memeber [member ...] : 如果给定成员存在于有序集合，那么移除这个成员


redis的六种淘汰策略：
volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰 lru = Least Recently Used
volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
no-enviction（驱逐）：禁止驱逐数据


redis事务的一些特性：
  1. 单独的隔离操作：事务中的所有命令会被序列化、按顺序执行，在执行的过程中不会被其他客户端发送来的命令打断
  2. 没有隔离级别的概念：队列中的命令在事务没有被提交之前不会被实际执行
  3. 特殊的原子性：redis中的一个事务中如果存在命令执行失败，那么其他命令依然会被执行，没有回滚机制

redis事务命令:
multi:开启事务
discard:放弃事务
exec:执行事务队列中的任务
watch：监视一个或多个键（被 WATCH 的键会被监视，并会发觉这些键是否被改动过了。 如果有至少一个被监视的键在 EXEC 执行之前被修改了， 那么整个事务都会被取消， EXEC返回nil, 表示事务已经失败。）
unwatch:放弃监视

事务中的两种错误：
a）入队错误：事务在执行 EXEC 之前，入队的命令可能会出错。比如说，命令可能会产生语法错误（参数数量错误，参数名错误，等等），或者其他更严重的错误，比如内存不足（如果服务器使用 maxmemory 设置了最大内存限制的话）。
b）执行错误：命令可能在 EXEC 调用之后失败。举个例子，事务中的命令可能处理了错误类型的键，比如将列表命令用在了字符串键上面，诸如此类。
注：第三种错误，redis进程终结，本文暂时不讨论这种错误。

对于入队错误，redis 2.6.5版本后，会记录这种错误，并且在执行EXEC的时候，报错并且终止事务，事务队列中的所有命令都不会执行。
对于执行错误，redis不会终止事务，报错的命令不会执行，其他命令正常执行。
