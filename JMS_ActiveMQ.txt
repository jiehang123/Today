本文主题：消息队列的基本概念与Spring整合ActiveMQ、ActiveMQ集群搭建

消息队列是分布式系统中的重要组件，当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候。但是本文不涉及任何集群和分布式的知识，因为我还没学到 -_-# ，这里只是讲解Demo。

消息队列的使用场景：
  应用解耦：消息的发送方和接收方不需要彼此联系，也不会受到对方影响，避免了调用接口失败而导致整个过程失败。
  异步处理：多应用对消息队列中同一消息进行处理，应用间并发处理消息，相比串行处理，减少处理时间；
  广播：使用主题作为消息通信载体，类似于广播模式，发布者发布一条消息，该消息通过主题传递给所有的订阅者，在一条消息广播之后才订阅的用户则是收不到该条消息的。
  限流削峰：系统处理能力有限时，可以利用消息队列做一个通用的“漏斗”，例如，广泛应用于秒杀或抢购活动中，避免流量过大导致应用系统挂掉的情况。
  消息驱动的系统：系统分解为消息队列，消息制造者和消息消费者，一个处理流程可以根据需要拆成多个阶段，阶段之间用队列连接起来，前一个阶段处理的结果放入队列，后一个阶段从队列中获取消息继续处理。
  
消息队列的两种模式：
点对点模式：消息生产者和消息消费者
  *每个消息只有一个消费者，消息一旦被消费，就不存在Queue中了（Queue支持存在多个消费者，但是一个消息只会被一个消费者消费）。
发布订阅模式：消息发布者和消息订阅者
  *发布者将消息发送到topic中，如果存在多个消费者订阅了该topic，那么该消息就会被所有订阅者消费。
  
负载均衡：
  一个queue配置多个消费者，他们都有独立但相同的消费能力，可以实现可靠的负载均衡。
  一个topic配置多个订阅者，这些订阅者能处理不同的业务逻辑，订阅者节点组成一个订阅者负载均衡，即分组订阅。
  

下面详细解释 Spring+ActiveMQ的配置：

首先要明白消息被生产和消费的步骤
发送消息的基本步骤：
  (1)、创建连接使用的工厂类JMS ConnectionFactory 
  (2)、使用管理对象JMS ConnectionFactory建立连接Connection（不需要调用connection.start()方法启动）
  (3)、使用连接Connection 建立会话Session 
  (4)、使用会话Session和管理对象Destination创建消息生产者MessageSender 
  (5)、使用消息生产者MessageSender发送消息

消息接收者接收消息的步骤
  (1)、创建连接使用的工厂类JMS ConnectionFactory 
  (2)、使用管理对象JMS ConnectionFactory建立连接Connection（需要调用connection.start()方法启动）
  (3)、使用连接Connection 建立会话Session 
  (4)、使用会话Session和管理对象Destination创建消息接收者MessageReceiver 
  (5)、使用消息接收者MessageReceiver接受消息，需要用setMessageListener将MessageListener接口绑定到MessageReceiver消息接收者必须实现了MessageListener接口，需要定义onMessage事件方法

Spring中的配置：
  
  配置ConnectionFactory：
	<!-- 配置JMS连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
        <property name="targetConnectionFactory" ref="targetConnectionFactory" />
        <property name="sessionCacheSize" value="10"/>
    </bean>
  解释：这里的connectionFactory只是方便Spring用来管理连接，真正被管理的JMS服务器连接是由不同的JMS服务器厂商提供的，所以需要配置真正的连接并且把它注入到Spring的ConnectionFactory中。如下：
  
  配置真正的MQ连接工厂：
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://45.76.51.233:61616" />
	</bean>
  解释：这里是配置ActiveMQ的连接工厂。ActiveMQ还为我们提供了PooledConnectionFactory，通过往里面注入ActiveMQConnectionFactory，可以将Connection, Session和MessageProducer池化。再加如下配置：
  
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
        <property name="connectionFactory" ref="targetConnectionFactory" />
        <property name="maxConnections" value="10"/>
    </bean>
  解释：如果Spring需要用到池化连接工厂，那就需要在JMS连接工厂里面将targetConnectionFactory的引用改成pooledConnectionFactory。我们也是可以不用这个池化连接工厂的。
  
  配置监听器：
    <!-- 配置消息队列监听器-->
    <bean id="queueMessageListener" class="com.jiehang.listener.QueueMessageListener" />
  解释：这里我自己定义了一个监听器，实现了Spring中的MessageListener接口，这个类会对接收到的消息进行处理。
  
  配置监听器容器，生产者发送消息到消息队列之后，消费者如何知道有消息被发送到消息队列了呢？它如何去实时的获取消息呢？Spring为我们提供了一个消息监听容器：
    <bean id="queueListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> 
	  <property name="connectionFactory" ref="connectionFactory"/> 
	  <property name="destination" ref="queueDestination"/> 
	  <property name="messageListener" ref="queueMessageListener"/> 
	  <property name="concurrentConsumers" value="2" /> 
    </bean 
  解释：容器首先需要知道消费的目的地是什么，所以需要配置destination，其次还需要知道要去监听哪个JMS服务器，如果这里既有ActiveMQ，又有RabbitMQ呢？所以需要配置connectionFactory，再者容器接收到的消息具体分发给哪个监听器去处理呢？所以需要要配置messageListener
  
  最后我们定义一个queue或者topic
	<!-- 定义消息队列（Queue） -->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue"> 
	  <property name="physicalName" value="JiehangQueue"/> 
	</bean>
  
	<!-- 定义消息队列（Queue） -->
	<bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic"> 
	  <property name="physicalName" value="JiehangTopic"/> 
	</bean> 
  解释：不用解释了
  
配置到这里就基本上通过Spring实现了对于一个消息队列的监听。如果我们需要有生产者去发送消息，或者不使用Spring去监听消息，而是写消费者去消费消息，可以直接连接ActivemMQ，下面集群的例子有讲解。



ActiveMQ 集群搭建(本机搭建的伪集群)

ActiveMQ的高可用原理
使用ZooKeeper注册所有的ActiveMQ Broker。只有其中的一个Broker可以提供服务，被视为 Master，其他的 Broker 处于待机状态，被视为Slave。如果Master因故障而不能提供服务，Zookeeper会从Slave中选举出一个Broker充当Master。
Slave连接Master并同步他们的存储状态，Slave不接受客户端连接。所有的存储操作都将被复制到连接Master的Slaves。如果Master宕了，得到了最新更新的Slave会成为 Master。故障节点在恢复后会重新加入到集群中并连接Master进入Slave模式。

首先搭建zookeeper的集群，可以参考我的这篇博客： https://github.com/jiehang123/Today/blob/master/Dubbo_Zookeeper.txt

然后开始搭建ActiveMQ集群，我使用了三个ActiveMQ，用的版本是 apache-activemq-5.15.4-3
修改他们的conf目录下的配置 activemq.xml 和 jetty.xml

三个activemq.xml里的如下节点的 brokerName属性必须相同
<broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}">

persistenceAdapter标签声明了ActiveMQ的默认持久化方式kahaDB，这里需要修改为replicatedLevelDB
<persistenceAdapter>
	<kahaDB directory="${activemq.data}/kahadb"/>
</persistenceAdapter>
修改为如下，其中zkAddress是三台zookeeper的地址，replicas是集群的数量，
<persistenceAdapter>
	<replicatedLevelDB
		 directory="${activemq.data}/leveldb"
		 replicas="3"
		 bind="tcp://0.0.0.0:0"
		 zkAddress="127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184"
		 hostname="127.0.0.1"
		 sync="local_disk"
		 zkPath="/activemq/leveldb-stores"
	/>
</persistenceAdapter>

如下标签声明了ActiveMQ的TCP链接端口号，三个MQ分别修改为 61616、61617和61618
<transportConnector name="openwire" uri="tcp://127.0.0.1:61616?、maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
注意注意：这里uri默认的是 tcp://0.0.0.0:61616 一定要修改成本地所在ip地址

修改jetty.xml里jetty的端口号，三个MQ分别修改为 8161、8162和8163
<property name="port" value="8161" />

客户端连接ActiveMQ的时候，需要把连接ActiveMQ的uri写成这样：
failover:(tcp://127.0.0.1:61616,tcp://127.0.0.1:61617,tcp://127.0.0.1:61618)?randomize=false

ok，这样三台ActiveMQ搭建的伪集群就配置好了，先启动三个zookeeper，再启动三个ActiveMQ，就可以接收，发送消息了。

如下是测试代码：
import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageProducer;
import javax.jms.Session;
import javax.jms.TextMessage;

import org.apache.activemq.ActiveMQConnectionFactory;

public class ActiveMqSenderAndReceiver {
	//注意这里连接ActiveMQ的URI的方式
	private static final String ACTIVEMQ_HOST = "failover:(tcp://127.0.0.1:61616,tcp://127.0.0.1:61617,tcp://127.0.0.1:61618)?randomize=false";
	private static String QUEUE_NAME = "JiehangQueue1";

	public static void main(String[] args) throws JMSException, InterruptedException {
		// send message thread
		new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					sendMessage();
				} catch (JMSException | InterruptedException e) {
					e.printStackTrace();
				}
			}
		}).start();

		// receive message thread
		new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					receiveMessage();
				} catch (JMSException | InterruptedException e) {
					e.printStackTrace();
				}
			}
		}).start();

	}

	private static void sendMessage() throws JMSException, InterruptedException {
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ACTIVEMQ_HOST);
		Connection connection = connectionFactory.createConnection();
		// send消息的时候可以不调用 connection.start()，receive的时候必须调用
		//connection.start();
		Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);
		Destination destination = session.createQueue(QUEUE_NAME);
		MessageProducer producer = session.createProducer(destination);
		for (int i = 0; i < 500000; i++) {
			Thread.sleep(2000);
			Message message = session.createTextMessage("Hello ActiveMQ--" + i);
			producer.send(message);
			session.commit();
			System.out.println("Send Message:" + ((TextMessage) message).getText());
		}
		producer.close();
		session.close();
		connection.close();
	}

	private static void receiveMessage() throws JMSException, InterruptedException {
		ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(ACTIVEMQ_HOST);
		Connection connection = connectionFactory.createConnection();
		connection.start();
		Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);
		Destination destination = session.createQueue(QUEUE_NAME);
		MessageConsumer consumer = session.createConsumer(destination);
		for (int i = 0; i < 5000000; i++) {
			Thread.sleep(3000);
			Message message = consumer.receive();
			session.commit();
			// System.out.println("Receive Message: " + ((TextMessage)message).getText());
			System.out.println("Receive Message: " + message);
		}
		session.close();
		consumer.close();
		connection.close();
	}
}
