深入理解java线程池之ThreadPoolExecutor类详解为了提高程序效率，我们经常会使用线程，如果在使用的时候创建，用完后就销毁，这样实现起来很简单，但如果并发线程很多，频繁的创建和销毁线程会浪费很多时间和资源。为了避免这种损耗，java中使用线程池来管理线程，池初始化时会创建一定数量的线程，需要的时候从中获取。本文以JDK8中的java.uitl.concurrent.ThreadPoolExecutor为例，对源码进行解读。先看他的一些重要属性：private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));private static final int RUNNING    = -1 << COUNT_BITS;private static final int SHUTDOWN   =  0 << COUNT_BITS;private static final int STOP       =  1 << COUNT_BITS;private static final int TIDYING    =  2 << COUNT_BITS;private static final int TERMINATED =  3 << COUNT_BITS;private final ReentrantLock mainLock = new ReentrantLock(); //线程池的状态锁private volatile int corePoolSize;  //线程池大小private volatile int maximumPoolSize; //线程池最大能容忍的线程数量private int largestPoolSize;      //记录线程池中曾经出现过的最大线程数，与容量无关，只是作为一个记录private volatile long keepAliveTime; //表示线程没有任务执行时最多保持多久时间会终止。private volatile boolean allowCoreThreadTimeOut; //是否允许核心线程超时，如果为true则核心线程空闲时间超过了keepAliveTime也会被关闭。private volatile RejectedExecutionHandler handler; //任务拒绝策略，当任务执行不过来的时候，会拒绝继续接受任务。private final BlockingQueue<Runnable> workQueue; //阻塞队列，用来存储等待执行的任务private volatile ThreadFactory threadFactory;  //线程工厂，主要用来创建线程
ctl变量保证了操作具有原子性，他保存了所有有效线程的数量和线程池的状态。池状态直接看JDK里面的注释:RUNNING:  Accept new tasks and process queued tasksSHUTDOWN: Don't accept new tasks, but process queued tasksSTOP:     Don't accept new tasks, don't process queued tasks,          and interrupt in-progress tasksTIDYING:  All tasks have terminated, workerCount is zero,          the thread transitioning to state TIDYING          will run the terminated() hook methodTERMINATED: terminated() has completed重点讲解： corePoolSize，maximumPoolSize，workQueue之间关系。 1.当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。 2.当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行3.当workQueue已满，新提交任务会创建新线程执行任务，此时被创建的线程的编号是在大于corePoolSize，小于maximumPoolSize的。4.当提交任务数超过maximumPoolSize时，新提交任务由RejectedExecutionHandler处理 5.当线程池中线程数量超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程 6.当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭。
接下来看一下ThreadPoolExecutor的构造方法：public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue){...};public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory){...}public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, RejectedExecutionHandler handler) {...}public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler) {...}
下面是构造方法的源码：public ThreadPoolExecutor(int corePoolSize,        int maximumPoolSize,        long keepAliveTime,        TimeUnit unit,        BlockingQueue<Runnable> workQueue,        ThreadFactory threadFactory,        RejectedExecutionHandler handler) { if (corePoolSize < 0 || maximumPoolSize <= 0 || maximumPoolSize < corePoolSize || keepAliveTime < 0)  throw new IllegalArgumentException(); if (workQueue == null || threadFactory == null || handler == null)  throw new NullPointerException(); this.acc = System.getSecurityManager() == null ? null : AccessController.getContext(); this.corePoolSize = corePoolSize; this.maximumPoolSize = maximumPoolSize; this.workQueue = workQueue; this.keepAliveTime = unit.toNanos(keepAliveTime); this.threadFactory = threadFactory; this.handler = handler;}TimeUnit是keppAliveTime的时间单位，可以为TimeUnit.DAYS;TimeUnit.HOURS;等等，TimeUnit是一个简单枚举类型。BlockingQueue作为存放任务的队列接口，一般有如下几种实现： ArrayBlockingQueue;  //有界队列 LinkedBlockingQueue; //无边界队列，没有空闲核心线程时，进来的任务都会被塞到这里，如果这时设置corePoolSize=maximumPoolSize=1;可以保证任务由一个线程串行处理。 SynchronousQueue;  //无容量的阻塞队列，使用时通常会设置maximumPoolSize=Integer.MAX_VALUE;keepAliveTime=60s;这样新进来的任务都会创建线程去处理。 DelayedWorkQueue;  //无界延迟阻塞队列ThreadFactory 线程工厂，用来创建线程，默认调用Executors.defaultThreadFactory();RejectedExecutionHandler表示当拒绝处理任务时的策略，有如下几种方式； ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 这个为默认值 ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。  ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程） ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务
创建线程池后，默认情况下池中是没有线程的，只有当任务到来时才会创建，用完之后再放回池中，如果需要立刻创建可以调用方法：public int prestartAllCoreThreads() {  //预创建corePoolSize个数的线程 int n = 0; while (addWorker(null, true))  ++n; return n;}或者public boolean prestartCoreThread() {  //预创建一个线程 return workerCountOf(ctl.get()) < corePoolSize && addWorker(null, true);}
ThreadPoolExecutor类继承自AbstractExecutorService抽象类AbstractExecutorService抽象类实现了ExecutorService接口ExecutorService接口继承自Executor接口Executor中只有一个方法： void execute(Runnable command); execute()是ThreadPoolExecutor中的核心方法，调用此方法就是向线程池提交一个任务，让线程池中的空闲线程去执行该任务，类中还有很多其他方法，有兴趣的可以去查阅API，接下来主要分析execute()的源码。
public void execute(Runnable command) { if (command == null)  throw new NullPointerException(); int c = ctl.get();       //workerCountOf(c)得到池中当前线程数量，isRunning(c)得到表示当前线程是否是RUNNING状态 if (workerCountOf(c) < corePoolSize) {  //如果当前线程的数量小于核心线程池的值  if (addWorker(command, true))   //创建一个线程去执行当前任务，如果创建成功就返回true。   return;  c = ctl.get();       //创建线程失败后就把线程池的状态和当前线程数量拿到。 } if (isRunning(c) && workQueue.offer(command)) {  //如果当前池中的线程数量已经达到了核心池的数量就不会再继续新建线程去执行任务，而是去判断当前线程池是否还处于RUNNING状态，并将任务放到队列中。  int recheck = ctl.get();      //这里再次获取池的信息，为了让下一步 double check 状态，这是为什么？因为。。。  if (! isRunning(recheck) && remove(command)) //如果当前线程不是处于RUNNING的状态，就从队列中移除任务，并采取相应的拒绝策略   reject(command);  else if (workerCountOf(recheck) == 0)   //否则如果当前线程处于RUNNING状态或者从队列中移除任务失败，并且当前线程数量为0，就执行if中的语句   addWorker(null, false); } else if (!addWorker(command, false)) //如果线程不是RUNNING状态或者任务加入到队列中失败（即队列已经满了），就创建继续创建线程执行该任务  reject(command);     //如果创建任务失败就采取相应的拒绝策略}
简单总结一下这个方法：1.当一个任务过来的时候，如果池中的线程数还没有达到核心线程数，就会新建线程去处理这个任务。2.当数量达到了核心线程数或者创建新线程的失败，就将进来的任务放到队列中去。3.如果第一步和第二步都失败了，也就是说新建线程和将任务添加到队列都失败了（可能有界队列被塞满了），就会再继续创建线程去执行这些任务（这里创建的线程是大于codePoolSize，小于maximumPoolSize）。
上面方法中最重要的就是addWorker(command, true)了，下面看这个方法的源码：private boolean addWorker(Runnable firstTask, boolean core) { retry:  //标识符，用于失败重试机制，暂时还没搞懂它的用法。 for (;;) {  int c = ctl.get();  int rs = runStateOf(c);  // Check if queue empty only if necessary.  if (rs >= SHUTDOWN &&     ! (rs == SHUTDOWN &&      firstTask == null &&      ! workQueue.isEmpty()))   return false;
  for (;;) {   int wc = workerCountOf(c);   if (wc >= CAPACITY ||    wc >= (core ? corePoolSize : maximumPoolSize))    return false;   if (compareAndIncrementWorkerCount(c))    break retry;   c = ctl.get();  // Re-read ctl   if (runStateOf(c) != rs)    continue retry;   // else CAS failed due to workerCount change; retry inner loop  } }
 boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try {  w = new Worker(firstTask);  final Thread t = w.thread;  if (t != null) {   final ReentrantLock mainLock = this.mainLock;   mainLock.lock();   try {    // Recheck while holding lock.    // Back out on ThreadFactory failure or if    // shut down before lock acquired.    int rs = runStateOf(ctl.get());
    if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {     if (t.isAlive()) // precheck that t is startable      throw new IllegalThreadStateException();     workers.add(w);     int s = workers.size();     if (s > largestPoolSize)      largestPoolSize = s;     workerAdded = true;    }   } finally {    mainLock.unlock();   }   if (workerAdded) {    t.start();    workerStarted = true;   }  } } finally {  if (! workerStarted)   addWorkerFailed(w); } return workerStarted;}
源码分析：if (rs >= SHUTDOWN &&   ! (rs == SHUTDOWN &&    firstTask == null &&    ! workQueue.isEmpty())) return false;这谁他妈写的判断条件，真他妈难懂，根据离散数学的知识，把这个if转换一下： if( rs >= SHUTDOWN && (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty()) ) 还是难懂，再转换一下：if( rs > SHUTDOWN || (rs == SHUTDOWN && firstTask != null) || (rs == SHUTDOWN && firstTask == null && workQueur.isEmpty()) ) 这样就比较清晰了1.当线程池是STOP, TIDYING或者TERMINATED的时候，就不能新建线程2.当线程池是SHUTDOWN的时候，不能为一个不为null的任务新建线程。(通俗点：都已经SHUTDOWN了，即使有任务过来也不会新建线程去处理了啊，但是会把队列中已经存在的任务处理完)3.当线程池是SHUTDOWN的时候,并且传进来的任务为null， 此时如果队列为空，就不能新建线程（通俗点：SHUTDOWN的时候，没有任务进来，队列也没有任务了，当然不再创建新线程了啊）。
for (;;) { int wc = workerCountOf(c); if (wc >= CAPACITY ||  wc >= (core ? corePoolSize : maximumPoolSize))  return false; if (compareAndIncrementWorkerCount(c))  break retry; c = ctl.get();  // Re-read ctl if (runStateOf(c) != rs)  continue retry; // else CAS failed due to workerCount change; retry inner loop}这里的core就是传进来的boolean值，用来控制创建的是核心线程还是非核心线程，不重要。compareAndIncrementWorkerCount(c)就是将当前线程数量加1
w = new Worker(firstTask);final Thread t = w.thread;这两段代码表示把任务交给Worker，Worker的构造方法在下面讲解if (t.isAlive()) throw new IllegalThreadStateException();如果新创建的线程已经是启动了，就抛出异常。if (workerAdded) { t.start(); workerStarted = true;}这里启动线程执行任务。
接下来看Worker这个对象的部分源码：Worker是ThreadPoolExecutor中的内部私有类，它继承了AbstractQueuedSynchronizer抽象类（这个类我不熟，先不研究它），实现了Runnable接口：看Worker中的属性/** Thread this worker is running in.  Null if factory fails. */final Thread thread;/** Initial task to run.  Possibly null. */Runnable firstTask;/** Per-thread task counter */volatile long completedTasks;看构造方法如下Worker(Runnable firstTask) { setState(-1); // inhibit interrupts until runWorker this.firstTask = firstTask; this.thread = getThreadFactory().newThread(this);}注意：Woker本身是Runnable，但是它里面还定义了一个Thread，这个才是真正执行任务的类。可以理解为每个Woker都绑定了一个Thread，这个Thread的Runnable就是当前Woker对象，也就是说，如果我们在外面调用这个Thread的start方法，最终启动的就是这个Woker的run方法。看Worker的run()方法：public void run() { runWorker(this); }这个方法是ThreadPoolExecutor中方法，再继续讲解他之前，我们先对Worker对象做一个小总结：1.Woker本身实现了Runnable接口，本身不是一个线程（他本身到底是不是一个线程啊，我有点晕了）。2.Woker内部持有一个Thread的对象，在创建Woker对象，通过一个工厂来产生一个线程来供Woker使用。3.外部使用Worker实际上是，通过Woker内部的Thread对象来执行的。4.每个线程与一个Woker对象绑定，不是单独使用的。
再继续看runWorker的源码：final void runWorker(Worker w) { Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock(); // allow interrupts boolean completedAbruptly = true; try {  while (task != null || (task = getTask()) != null) { //如果任务不是null，或者说任务是null，但是从队列中还有排队等待的任务，getTask()方法就是从队列中获取任务，暂时不看源码了，我开始有点乱了。   w.lock();   // If pool is stopping, ensure thread is interrupted;   // if not, ensure thread is not interrupted.  This   // requires a recheck in second case to deal with   // shutdownNow race while clearing interrupt   if ((runStateAtLeast(ctl.get(), STOP) ||     (Thread.interrupted() &&      runStateAtLeast(ctl.get(), STOP))) &&    !wt.isInterrupted())    wt.interrupt();   try {    beforeExecute(wt, task);    Throwable thrown = null;    try {     task.run();    } catch (RuntimeException x) {     thrown = x; throw x;    } catch (Error x) {     thrown = x; throw x;    } catch (Throwable x) {     thrown = x; throw new Error(x);    } finally {     afterExecute(task, thrown);    }   } finally {    task = null;    w.completedTasks++;    w.unlock();   }  }  completedAbruptly = false; } finally {  processWorkerExit(w, completedAbruptly); //这个方法懒得看了，就当是回收资源，做善后处理吧。 }}源码分析：if ((runStateAtLeast(ctl.get(), STOP) || (Thread.interrupted() &&  runStateAtLeast(ctl.get(), STOP))) && !wt.isInterrupted())wt.interrupt();这他妈一顿操作，我又是一脸懵比，我猜他的意思就是判断当前池的状态，如果是STOP就终止当前Worker的线程，先这么理解吧，不重要，继续往下看。try { beforeExecute(wt, task); Throwable thrown = null; task.run(); afterExecute(task, thrown);} finally { task = null; w.completedTasks++; w.unlock();}task就是执行这个任务，这一段在一个while循环里面，所以当这个任务执行完毕后，就会再从队列中获取任务继续执行。
这里再对getTask()源码简单讲解一下：private Runnable getTask() { boolean timedOut = false;  for (;;) {  int c = ctl.get();  int rs = runStateOf(c);
  // Check if queue empty only if necessary.  if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {   decrementWorkerCount();   return null;  }
  int wc = workerCountOf(c);
  // Are workers subject to culling?  boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;
  if ((wc > maximumPoolSize || (timed && timedOut))   && (wc > 1 || workQueue.isEmpty())) {   if (compareAndDecrementWorkerCount(c))    return null;   continue;  }
  try {   Runnable r = timed ?    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :    workQueue.take();   if (r != null)    return r;   timedOut = true;  } catch (InterruptedException retry) {   timedOut = false;  } }}大致意思就是说，一段乱七八糟的判断后，如果当前线程数量或者池的状态不太正常了，就返回null； 如果都很稳定，就从队列中拿出一个任务立即返回，如果队列中没任务了，就无限阻塞下去。
源码的分析大致就是这样，分析过程是按照程序执行的过程来写的，也是打着断点一边看一边写的，有些地方我自己也还有疑惑，希望你看完后能有收获，并且能自己编码实现一个简单线程池的主要功能。最后总结一下：1.客户通过submit方法向线程池提交任务，线程池接收到这个任务，判断当前线程数是否小于核心线程数目，如果则为任务创建线程；如果大于，现尝试将任务添加到任务队列中；如果添加失败的话，则为这个任务添加创建线程，前提是当前线程数目小于最大线程数目。2.创建线程的过程中在addWoker方法里面进行，如果创建成功，则调用start方法，使这个线程开始动起来；如果创建失败，将这个Woker对象从线程容器中移除。3.每个线程调用runWoker方法，使得线程不断从任务队列中获取任务来解决。4.当任务队列没有任务的时候，线程会阻塞在queue.take方法那里。5.通常来说runWoker方法应该是死循环（不是一直在循环，会阻塞的），但是当在getTask返回null或者抛出了异常，会退出循环，进入processWokerExit方法进行回收操作。
