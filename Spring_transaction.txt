
如果事物的传播特性为REQUIRES_NEW：
当单线程中出现嵌套事务的情况(比如，在service层上定义了事务，service1的save方法调用了另一个service2的delete方法)，那这就是两个独立的事务，如果service2的内层事务中出现了某个异常，内层事务当然就会rollback；如果这个异常没有被捕获，它就会向上扩散到外层事务中，如果外层事务中捕获了该异常，并且外层事务中没有其他未捕获异常，那外层事务就可以commit，但是如果外层事务中没有捕获内层事务中的异常，那外层事务也会rollback。

上面是我通过实践的demo证实的结论，但是这里我有一点不太明白了，首先事务与connection是一一对应的，spring获取connection都是以本地线程化的方式来进行保存的，既然是单线程，就算嵌套事务也还是一个线程，那一个线程是怎么区分这两个事务的呢？当内嵌事务开启的时候，获得的是一个新connection？那内嵌事务commit的时候怎么再次获取到这个connection而不会拿外层事务的connection呢？



总结：
1、Spring中DAO和Service都是以单实例的bean形式存在，Spring通过ThreadLocal类将有状态的变量（例如数据库连接Connection）本地线程化，从而做到多线程状况下的安全。在一次请求响应的处理线程中， 该线程贯通展示、服务、数据持久化三层，通过ThreadLocal使得所有关联的对象引用到的都是同一个变量。 
2、在事务属性为REQUIRED时，在相同线程中进行相互嵌套调用的事务方法工作于相同的事务中。如果互相嵌套调用的事务方法工作在不同线程中，则不同线程下的事务方法工作在独立的事务中。如果在同一个线程中，由于事务传播属性是REQUIRES_NEW，而出现了互相嵌套的事务，那么他们也属于两个独立的事务。
3、程序只要使用SpringDAO模板，例如JdbcTemplate进行数据访问，一定没有数据库连接泄露问题！如果程序中显式的获取了数据连接Connection，则需要手工关闭它，否则就会泄露！
4、当Spring事务方法运行时，就产生一个事务上下文，它在本事务执行线程中对同一个数据源绑定了一个唯一的数据连接，所有被该事务上下文传播的方法都共享这个连接。要获取这个连接，如要使用Spirng的资源获取工具类DataSourceUtils。
5、事务管理上下文就好比一个盒子，所有的事务都放在里面。如果在某个事务方法中开启一个新线程，新线程中执行另一个事务方法，则由上面第二条可知这两个方法运行于两个独立的事务中，但是：如果使用DataSourcesUtils，则新线程中的方法可以从事务上下文中获取原线程中的数据连接！
6、上面一条的最后这一句：如果使用DataSourcesUtils，则新线程中的方法可以从事务上下文中获取原线程中的数据连接，我感觉不太对，新线程开启的新事务就表示它获取到的是新的数据连接，还怎么能拿到原线程中连接呢？
