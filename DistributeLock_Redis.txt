本文主题：利用redis实现分布式锁

概述：
目前几乎很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。
在很多场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。
分布式锁一般有三种实现方式：1. 数据库乐观锁；2. 基于Redis的分布式锁；3. 基于ZooKeeper的分布式锁。本篇博客将介绍第二种方式，基于Redis实现分布式锁。虽然网上已经有各种介绍Redis分布式锁实现的博客，然而他们的实现却有着各种各样的问题，这里列举一个正确和错误的范例。

首先，为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下四个条件：
互斥性。在任意时刻，只有一个客户端能持有锁。
不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。
具有容错性。只要大部分的Redis节点正常运行，客户端就可以加锁和解锁。
解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。

选用Redis实现分布式锁原因：
1、Redis有很高的性能
2、Redis命令对此支持较好，实现起来比较方便


这里直接给出正确的加锁解锁代码实现：

import java.util.Collections;
import java.util.UUID;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

public class DistributeLockRight {

	private static final String LOCK_SUCCESS = "OK";
	private static final String RELEASE_SUCCESS = "OK";
	private static final String SET_IF_NOT_EXIST = "NX";
  	private static final String SET_WITH_EXPIRE_TIME = "PX";
	
	private JedisPool jedisPool;
  
	public DistributeLockRight(JedisPool jedisPool) {
		this.jedisPool = jedisPool;
	}

	public String LockWithTimeOut(String lockName, long acquiredTime, long timeOut) {
		Jedis jedis = jedisPool.getResource();
		String identify = UUID.randomUUID().toString();
		long currentTime = System.currentTimeMillis();
		while (System.currentTimeMillis() < currentTime + acquiredTime) {
			if(LOCK_SUCCESS.equals(jedis.set(lockName, identify, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, timeOut))) {
				System.out.println(Thread.currentThread().getName() + "获得了锁--DistributeLock_2");
				return identify;
			}
		}
		System.out.println(Thread.currentThread().getName() + "时间到了没拿到锁--DistributeLock_2");
		return identify;
	}
	
	public boolean releaseDistributedLock(String lockName, String identify) {
		Jedis jedis = jedisPool.getResource();
		String script = "if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end";
		Object result = jedis.eval(script, Collections.singletonList(lockName), Collections.singletonList(identify));
		if (RELEASE_SUCCESS.equals(result))
		    return true;
		return false;
	}
}

可以看到，我们加锁就一行代码：jedis.set(String key, String value, String nxxx, String expx, int time)，这个set()方法一共有五个形参：
第一个为key，我们使用key来当锁，因为key是唯一的。
第二个为value，我们传的是identify，很多童鞋可能不明白，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到可靠性时，分布式锁要满足第四个条件解铃还须系铃人，通过给value赋值为identify，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。identify可以使用UUID.randomUUID().toString()方法生成。
第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；
第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。
第五个为time，与第四个参数相呼应，代表key的过期时间。
总的来说，执行上面的set()方法就只会导致两种结果：1. 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。2. 已有锁存在，不做任何操作。
心细的童鞋就会发现了，我们的加锁代码满足我们可靠性里描述的三个条件。首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），不会发生死锁。最后，因为我们将value赋值为identify，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。由于我们只考虑Redis单机部署的场景，所以容错性我们暂不考虑。

可以看到，我们解锁只需要两行代码就搞定了！第一行代码，我们写了一个简单的Lua脚本代码，第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为identify。eval()方法是将Lua代码交给redis服务端执行。
那么这段Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与identify相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。那么为什么执行eval()方法可以确保原子性，源于redis的特性，详情可以去参看redis的官方文档。

注意：下面给出一种错误加锁方式的示例：
public String LockWithTimeOut(String lockName, long acquiredTime, long timeOut) {
	Jedis jedis = jedisPool.getResource();
	String identifier = UUID.randomUUID().toString();
	long currentTime = System.currentTimeMillis();
	while (System.currentTimeMillis() < currentTime + acquiredTime) {
		if (jedis.setnx(lockName, identifier) == 1) {
//				int i = 8/0; 	//如果这里出现了异常，这个锁就会因为没有设置过期时间而变成死锁
			jedis.expire(lockName, (int) (timeOut / 1000));
			System.out.println(Thread.currentThread().getName() + "获得了锁--DistributeLockWrong");
			return jedis.get(lockName);
		}
	}
	//如果因为前面某个线程发生异常而产生了死锁，新来的线程请求超时后会检查这个key有没有设置过期时间，如果没有就加上，这里至少防止了死锁不会一直存在的问题。
	if (jedis.ttl(lockName) == -1) {
		jedis.expire(lockName, (int) (timeOut / 1000));
	}
	System.out.println(Thread.currentThread().getName() + "时间到了没拿到锁--DistributeLockWrong");
	return identifier;
}
  
这个错误示例，会因为程序异常而产生死锁，不过后面紧跟着的一个请求超时的线程会立刻给这个锁再设置一个过期时间，然后时间到了可以自动解锁，但是这里已经违反了锁的实现的几个条件(1、发生了死锁; 2、并不是当前线程自己设置的过期时间而解锁)。而且，如果后来的线程请求没有超时，会一直循环尝试获取锁。


下面给出另一种错误加锁方式的示例：
public static boolean wrongGetLock2(Jedis jedis, String lockKey, int expireTime) {
    long expires = System.currentTimeMillis() + expireTime;
    String expiresStr = String.valueOf(expires);
    // 如果当前锁不存在，返回加锁成功
    if (jedis.setnx(lockKey, expiresStr) == 1) {
        return true;
    }
    // 如果锁存在，获取锁的过期时间
    String currentValueStr = jedis.get(lockKey);
    if (currentValueStr != null && Long.parseLong(currentValueStr) < System.currentTimeMillis()) {
        // 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间
        String oldValueStr = jedis.getSet(lockKey, expiresStr);
        if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
            // 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁
            return true;
        }
    }
    // 其他情况，一律返回加锁失败
    return false;
}

这个错误示例比较难以发现，jedis.setnx(key, value)命令实现加锁，其中key是锁，value是锁的过期时间; jedis.getSet(key, value)，这个命令会首先拿到key中已经对应的oldValue，然后将oldValue替换为新的value
执行过程：首先获取锁，如果成功直接返回true，如果失败，就获取锁的过期时间，如果锁已经过期，就设置新的过期时间，然后返回true
假设有下面的场景：
A线程设置的锁的value为8:03
到8:04了，A线程还没有释放锁，现在B和C线程都过来了，然后B和C都拿到currentValueStr这个8:03的时间，他俩都发现A的锁已经过期了
B线程通过getSet改变了锁的value为8:06，然后得到oldValueStr为8:03
现在C线程也通过getSet改变了锁的value为8:07，然后得到oldValueStr为8:06,
他俩都进行currentValueStr和oldValueStr的比较，显然B线程能成功，C线程失败了，所以B线程返回true，C线程返回false

所以问题来了：
1、由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步
2、当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但是这个客户端的锁的过期时间可能被后面的客户端覆盖。比如上面场景中的例子，B虽然获取了锁，但是本来B设置的过期时间为8:06，却被C修改为8:07了，这显然是不合理的。
3. 锁不具备拥有者标识，即任何客户端都可以解锁。


注意：下面给出错误的解锁方式的示例：
public static void wrongReleaseLock2(Jedis jedis, String lockKey, String requestId) {
    // 判断加锁与解锁是不是同一个客户端
    if (requestId.equals(jedis.get(lockKey))) {
        // 若在此时，这把锁突然不是这个客户端的，则会误解锁
        jedis.del(lockKey);
    }
}
如代码注释，问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。那么是否真的有这种场景？答案是肯定的，比如客户端A加锁，一段时间之后客户端A要去解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A在执行del()方法的时候，则将客户端B的锁给解除了。

总结：
本文主要介绍了如何使用Java代码正确实现Redis分布式锁，对于加锁和解锁也分别给出了一个比较经典的错误示例。其实想要通过Redis实现分布式锁并不难，只要保证能满足可靠性里的四个条件。高并发情况下在实现锁的时候要尽量考虑共享资源的争夺和操作的原子性，这样就能提前发现程序可能存在的bug。
如果你的项目中Redis是多机部署的，那么可以尝试使用Redisson实现分布式锁，这是Redis官方提供的Java组件，这个东西我有时间研究研究了会再写博客讲解。
