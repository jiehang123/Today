1. 什么是CAS
compare and swap，比较替换，假设三个操作数：内存值，预期值和要修改的值，只有当内存值与预期值相等时，才会将内存值修改为要修改的值，否则不进行任何操作。

2. Class.forName和ClassLoader，newInstance和new Object()的区别？
前两个都是对类进行加载
1)Class.forName(className)实际执行的是Class.forName(className, true, classloader), 第二个参数表示是否需要初始化类，所以它除了将class加载到JVM中之外，还会对类进行解释，执行其中的静态块代码
2)ClassLoader.loadClass(className)实际上执行的是ClassLoader.loadClass(className, false)，第二个参数表示是否需要初始化类，所以它只会加载类。
3)new Object()就是生成一个实例，new之前该类可以没有被加载，new的时候JVM会自己加载；new的时候可以调用任意的构造方法。
4)调用newInstance()前必须保证1.该类已经被加载到JVM中，2该类已经链接了，而这两步正是上面两个方法完成的;其实可以理解为，newInstance把new分解成了两步(加载和实例化)；此外newInstance只能调用无参构造方法。

3. Java中的队列都有哪些，有什么区别。
不阻塞队列 
LinkedList：底层使用双向链表结构实现。可以作为队列，栈和双端队列
PriorityQueue：维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位。
ConcurrentLinkedQueue：基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好。收集关于队列大小的信息会很慢，需要遍历队列。
阻塞队列
ArrayBlockingQueue ：一个由数组支持的有界队列。
LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。
PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。
DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。
SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。

4. JVM中的类加载机制; 延伸的问题：实例化一个对象经历的所有步骤
分为五个过程：加载-->验证-->准备-->解析-->初始化-->使用-->卸载; 其中验证，准备和解析三步合称为连接

5. Java的内存模型以及GC算法

6. 线程池的状态？以及线程在哪些时候他们处于这些状态？
Thread中用枚举State来表示线程的状态，分别是：
NEW(新建状态):new出来(线程被创建)之后就处于新建状态
RUNNABLE(就绪状态):线程的start()方法被调用之后，就处于可运行状态，只等待获取CPU时间片的使用权。即处于RUNNABLE状态的线程除了没有CPU之外，其他运行必须的资源都已经准备就绪。
BLOCKED(阻塞状态):一个线程因为等待临界区的锁被阻塞产生的状态 , 因为 Lock 或者 synchronize 关键字产生的状态；注意IO阻塞的时候可不是BLOCKED状态而是运行或者就绪状态啊。这里的阻塞状态就是因为共享资源被锁而引起的。
WAITING(无限期等待):处于这种状态的线程不会被分配CPU执行时间，它们要等待被其它线程显示的唤醒。这种状态通常是指一个线程拥有对象锁后进入到相应的代码区域后，调用相应的“锁对象”的wait()方法操作后产生的一种结果。变相的实现还有LockSupport.park()、Thread.join()等，它们也是在等待另一个事件的发生，也就是描述了等待的意思。
	注意：
	LockSupport.park(Object blocker) 会挂起当前线程，参数blocker是用于设置当前线程的“volatile Object parkBlocker 成员变量”
	parkBlocker 是用于记录线程是被谁阻塞的，可以通过LockSupport.getBlocker()获取到阻塞的对象，用于监控和分析线程用的。
	“阻塞”与“等待”的区别：
	（1）“阻塞”状态是等待着获取到一个排他锁，进入“阻塞”状态都是被动的，离开“阻塞”状态是因为其它线程释放了锁，不阻塞了；
	（2）“等待”状态是在等待一段时间 或者 等待唤醒动作的发生，进入“等待”状态是主动的
	如主动调用Object.wait()，如无法获取到ReentraantLock，主动调用LockSupport.park()，如主线程主动调用 subThread.join()，让主线程等待子线程执行完毕再执行
	离开“等待”状态是因为其它线程发生了唤醒动作或者到达了等待时间
TIMED_WAITING(有限期等待):
处于这种状态的线程也不会被分配CPU执行时间，不过无需等待被其它线程显示的唤醒，在一定时间之后它们会由系统自动的唤醒。
	以下方法会让线程进入TIMED_WAITING限期等待状态：
	（1）Thread.sleep()方法
	（2）设置了timeout参数的Object.wait()方法
	（3）设置了timeout参数的Thread.join()方法
	（4）LockSupport.parkNanos()方法
	（5）LockSupport.parkUntil()方法
TERMINATED(结束):已终止线程的线程状态，线程已经结束执行。换句话说，run()方法走完了，线程就处于这种状态。

本题补充知识点：
无参thread.join():在parent中调用无参sub.join()会使parent线程进入WAIT状态，直到sub线程执行完，但是如果parent锁住了一些资源，他也不会释放持有的资源。
Thread.yield():会使线程从运行状态金瑞RUNNABLE状态。也就是让出CPU时间片，不过他可能立马又抢到时间片继续执行，也可能其他线程执行。javadoc里面说最好别使用它。
我有一个疑惑Thread.sleep(0)和Thread.yield()有什么区别，我认为他们的作用都是触发操作系统立刻重新进行一次CPU的竞争啊。// TODO

7. CountDownLatch、CyclicBarrier和Semaphore的作用和使用场景
https://www.cnblogs.com/dolphin0520/p/3920397.html
CountDownLatch类似计数器。它有两个比较重要的方法await(),调用此方法的线程会挂起，直到count为0才继续执行(await还有一个重载的方法await(timeout, timeUnit))。countDown(),就是将count值减一。
CyclicBarrier叫做回环栅栏。叫回环是因为当所有线程都释放以后，它可以重复利用。
她的作用：用来挂起当前线程，直到所有线程都达到barrier之后再同时执行后续任务。
Semaphore是信号量。用来控制同时访问的个数，通过acquire()来获取一个许可，如果没有就等待，而release()就是释放一个许可。

本题补充点：CountDownLatch和CycliBarrier之间区别是什么？
都能够实现线程之间的等待，只不过它们侧重点不同：
CountDownLatch一般用于一个或者多个线程，等待其他一组线程完成操作，再继续执行。
CycliBarrier一般用于一组线程之间相互等待，达到一个共同点，再继续执行。

8. web.xml中servlet ,filter ,listener ,interceptor的作用与区别
//TODO

9. HashMap, HashTable, TreeMap, ConcurrentHashMap，是什么？底层数据结构？各有什么特点？
HashMap是一个采用哈希表实现的键值对集合, 底层实现是数组+链表+红黑树，在存储和获取指定元素时，需要经过hash运算，得到目标元素在hash表中的位置，当出现hash冲突的时候，采用拉链法进行解决。
key不能重复，value可以重复，可以允许一个key为null
元素时无序的，而且顺序可能会随着结构变化而改变
非线程安全的
插入和获取的时间复杂度，基本为O(1),前提是要有适当的hash函数，让元素分布在均匀的位置上

//TODO
Treemap

本题补充点：解决Hash冲突的方法有什么？
开放定址法（线性探测再散列，二次探测再散列，伪随机探测再散列）
再哈希法
链地址法
建立一个公共溢出区

10. Tomcat参数和性能调优
https://www.cnblogs.com/yanghua1012/p/5869192.html
https://blog.csdn.net/lykangjia/article/details/52839347
https://blog.csdn.net/samHuangLiang/article/details/79295496

11. ThreadLocal 是什么底层如何实现?写一个例子呗?
ThreadLocal就是线程本地变量，为变量在每个线程中创建一个副本，并通过set和get方法来操作变量
ThreadLocal中定义了一个类：ThreadLocalMap，它是用来绑定线程和变量副本的
每个线程都会持有一个ThreadLocalMap引用(Thread中有个属性就是ThreadLocalMap)
所以在ThreadLocal的set方法中，就是把threadLocal对象自己作为key，真正的存储对象作为value来保存在ThreadLocalMap中的。
ThreadLocal仅仅是作为一个变量访问的入口

12. volatile的工作原理?
volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。
volatile可以禁止指令重排序，保证内存可见性
下面是一个指令重排序的例子
public class SimpleHappenBefore {
    private static int a = 0;
    private static boolean flag = false;
    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i < 1000; i++) {

            ThreadA threadA = new ThreadA();
            ThreadB threadB = new ThreadB();

            threadA.start();
            threadB.start();

            threadA.join();
            threadB.join();
            
            a = 0;
            flag = false;
        }
    }
    static class ThreadA extends Thread {
        public void run() {
            a = 1;
            flag = true;
        }
    }
    static class ThreadB extends Thread {
        public void run() {
            if (flag) {
                a = a * 1;
                System.out.println("YES");
            }
            if (a == 0) {
                System.out.println("ha,a==0");
            }
        }
    }
}

13. cglib和jdk动态代理的区别？
两种方式都使用了动态生成字节码技术。
JDK动态代理只能对实现了接口的类生成代理，而不能针对类。 implements InvocationHandler
CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法（继承）。implements MethodInterceptor
补充：
Spring在选择用JDK还是CGLiB的依据：
	(1)当Bean实现接口时，Spring就会用JDK的动态代理
	(2)当Bean没有实现接口时，Spring使用CGlib是实现
	(3)可以强制使用CGlib（在spring配置中加入<aop:aspectj-autoproxy proxy-target-class="true"/>）
使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，cglig代理可以直接定位到生成的class中的被调用方法，比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理，因为CGLib原理是动态生成被代理类的子类。

13. 分析代码在JDK1.8中的输出：
String string_2 = new StringBuilder("Clas").append("s").toString();
System.out.println(string_2.intern() == string_2); //true

String string_3 = new StringBuilder("ja").append("va").toString();
System.out.println(string_3.intern() == string_3); //false

String s1 = new String("2");
s1.intern();
String s2 = "2";
System.out.println(s1 == s2); //false

String s3 = new String("1") + new String("1");
s3.intern();
String s4 = "11";
System.out.println(s3 == s4); //true

String s5 = new String("3") + "3";
s3.intern();
String s6 = "33";
System.out.println(s3 == s4); //true


14. Dubbo中zookeeper做注册中心，如果注册中心集群都挂掉，发布者和订阅者之间还能通信么？
可以，启动dubbo时，消费者会从zk拉取注册的生产者的地址接口等数据，缓存在本地。每次调用时，按照本地存储的地址进行调用。倒是无法从注册中心去同步最新的服务列表，在注册中心全部挂掉后增加新的提供者，则不能被消费者发现.
1). 监控中心宕掉不影响使用，只是丢失部分采样数据
2). 数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务
3). 注册中心对等集群，任意一台宕掉后，将自动切换到另一台
4). 注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯
5). 服务提供者无状态，任意一台宕掉后，不影响使用
6). 服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复

15. 你知道哪些或者你们线上使用什么GC策略？它有什么优势，适用于什么场景？


16. TCP三次握手
（1）第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。
（2）第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。
（3）第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。
ps：为什么是三次握手：https://blog.csdn.net/whyliyu/article/details/51078276

同步集合与并发集合？
同步集合可以简单地理解为通过synchronized来实现同步的集合。如果有多个线程调用同步集合的方法，它们将会串行执行。 
Collections是为集合提供各种方便操作的工具类，通过它，可以实现集合排序、查找、替换、同步控制、设置不可变集合
同步集合比如：Vector，HashTable
并发集合是jdk5.0重要的特性，增加了并发包java.util.concurrent.*。Java内存模型、volatile变量及AbstractQueuedSynchronizer(简称AQS同步器)，是并发包众多实现的基础。
常见的并发集合： 
ConcurrentHashMap：线程安全的HashMap的实现 
CopyOnWriteArrayList：线程安全且在读操作时无锁的ArrayList 
CopyOnWriteArraySet：基于CopyOnWriteArrayList，不添加重复元素 
ArrayBlockingQueue：基于数组、先进先出、线程安全，可实现指定时间的阻塞读写，并且容量可以限制 
LinkedBlockingQueue：基于链表实现，读写各用一把锁，在高并发读写操作都多的情况下，性能优于ArrayBlockingQueue

full gc排查：https://blog.csdn.net/wilsonpeng3/article/details/70064336
Full GC的原因
我们知道Full GC的触发条件大致情况有以下几种情况： 
1. 程序执行了System.gc() //建议jvm执行fullgc，并不一定会执行 
2. 执行了jmap -histo:live pid命令 //这个会立即触发fullgc 
3. 在执行minor gc的时候进行的一系列检查，检查过程如下：
	执行Minor GC的时候，JVM会检查老年代中最大连续可用空间是否大于了当前新生代所有对象的总大小。
	如果大于，则直接执行Minor GC（这个时候执行是没有风险的）。
	如果小于了，JVM会检查是否开启了空间分配担保机制，如果没有开启则直接改为执行Full GC。
	如果开启了，则JVM会检查老年代中最大连续可用空间是否大于了历次晋升到老年代中的平均大小，如果小于则执行改为执行Full GC。
	如果大于则会执行Minor GC，如果Minor GC执行失败则会执行Full GC
GC的选择
官方推荐，需要根据应用的实际情况进行选择。在选择之前必须要对应用的堆大小、收集频率进行估算。

使用SerialGC的场景： 
1、如果应用的堆大小在100MB以内。 
2、如果应用在一个单核单线程的服务器上面，并且对应用暂停的时间无需求。 
使用ParallelGC的场景: 
如果需要应用在高峰期有较好的性能，但是对应用停顿时间无高要求（比如：停顿1s甚至更长）。 
使用G1、CMS场景: 
1、对应用的延迟有很高的要求。 
2、如果内存大于6G请使用G1。
	
线上Gc故障排查：https://www.cnblogs.com/shengs/p/4945741.html


共享锁和独占锁有什么区别？
共享锁【S锁】
又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。
排他锁【X锁】
又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。

常见集合类：
List:
	Vector:基于数组实现
	ArrayList:基于数组实现
	LinkedList:链表
Set:
	EnumSet:
	TreeSet:
	HashSet:
		LinkedHashSet:
Map:
	HashTable:
	HashMap:
	TreeMap: https://www.cnblogs.com/skywang12345/p/3310928.html
	LinkedHashMap: https://www.cnblogs.com/xiaoxi/p/6170590.html
