本文主题：commons-pool2对象池的简单讲解与使用

创建某些特定对象可能是一个很消耗时间的过程，比如数据库连接。如果使用的时候创建，用完就销毁，那将是一个极其浪费资源和时间的过程。
对象池可以创建并保存一定数量的对象，需要的使用从池中获取，使用完之后还回到池中，这样可以大大节省获取对象的时间。对象池是资源共享和同步的。

对象池常见问题及面试题：
1、为什么需要使用对象池？什么场景下使用？
2、维护对象池也需要耗费内存，这样会不会得不偿失？有什么方式可以优化维护对象池带来的内存损失？
3、对象池中的核心线程数该如何确定？
4、对象池有哪些优秀的使用，举例分析？
5、你使用过对象池中的哪些类或接口来构建过自己的池么？并简单说明实现过程？
6、对象池是通过什么数据结构来维护空闲对象的？
7、如果对象池中的对象已经被拿完了，还有线程再去从对象池中拿对象，那结果会怎样？

几个核心类介绍：
GenericObjectPool，这个类就是一个基本对象池的实现
	获取、返回对象等操作都是调用这里，其中的主要方法：
	public T borrowObject()
	public void returnObject(final T obj)
	还有一些其他方法，比如关闭对象池，销毁对象池，获取池大小等

PooledObjectFactory接口，这个接口需要我们自己实现
	池化对象工厂，负责创建、激活，销魂对象等操作。但是具体什么对象需要被池化，需要我们自己确定，所以需要自己实现该接口。
	主要方法如下：
	Object makeObject()： 创建一个新对象;当对象池中的对象个数不足时,将会使用此方法来"输出"一个新的"对象",并交付给对象池管理。
	void destroyObject(Object obj)： 销毁对象,如果对象池中检测到某个"对象"idle的时间超时,或者操作者向对象池"归还对象"时检测到"对象"已经无效,那么此时将会导致"对象销毁";"销毁对象"的操作设计相差甚远,但是必须明确:当调用此方法时,"对象"的生命周期必须结束.如果object是线程,那么此时线程必须退出;如果object是socket操作,那么此时socket必须关闭;如果object是文件流操作,那么此时"数据flush"且正常关闭.
	boolean validateObject(Object obj)： 检测对象是否"有效"；Pool中不能保存无效的"对象",因此"后台检测线程"会周期性的检测Pool中"对象"的有效性,如果对象无效则会导致此对象从Pool中移除,并destroy;此外在调用者从Pool获取一个"对象"时,也会检测"对象"的有效性,确保不能讲"无效"的对象输出给调用者;当调用者使用完毕将"对象归还"到Pool时,仍然会检测对象的有效性.所谓有效性,就是此"对象"的状态是否符合预期,是否可以对调用者直接使用;如果对象是Socket,那么它的有效性就是socket的通道是否畅通/阻塞是否超时等.
	void activateObject(Object obj)： "激活"对象,当Pool中决定移除一个对象交付给调用者时额外的"激活"操作,比如可以在activateObject方法中"重置"参数列表让调用者使用时感觉像一个"新创建"的对象一样;如果object是一个线程,可以在"激活"操作中重置"线程中断标记",或者让线程从阻塞中唤醒等;如果object是一个socket,那么可以在"激活操作"中刷新通道,或者对socket进行链接重建(假如socket意外关闭)等.
	void void passivateObject(Object obj)： "钝化"对象,当调用者"归还对象"时,Pool将会"钝化对象";钝化的言外之意,就是此"对象"暂且需要"休息"一下.如果object是一个socket,那么可以passivateObject中清除buffer,将socket阻塞;如果object是一个线程,可以在"钝化"操作中将线程sleep或者将线程中的某个对象wait.需要注意的时,activateObject和passivateObject两个方法需要对应,避免死锁或者"对象"状态的混乱.
	
GenericObjectPoolConfig，参数配置类，这个类允许使用者对对象池的一些参数进行调整，根据需要定制对象池，下面列举一些主要属性：
	lifo： 对象池存储空闲对象是使用的LinkedBlockingDeque，它本质上是一个支持FIFO和FILO的双向的队列，common-pool2中的LinkedBlockingDeque不是Java原生的队列，而有common-pool2重新写的一个双向队列。如果为true，表示使用FIFO获取对象。默认值是true.建议使用默认值。
	fairness： common-pool2实现的LinkedBlockingDeque双向阻塞队列使用的是Lock锁。这个参数就是表示在实例化一个LinkedBlockingDeque时，是否使用lock的公平锁。默认值是false，建议使用默认值。
	maxWaitMillis： 当没有空闲连接时，获取一个对象的最大等待时间。如果这个值小于0，则永不超时，一直等待，直到有空闲对象到来。如果大于0，则等待maxWaitMillis长时间，如果没有空闲对象，将抛出NoSuchElementException异常。默认值是-1；可以根据需要自己调整，单位是毫秒。
	minEvictableIdleTimeMillis： 对象最小的空闲时间。如果为小于等于0，最Long的最大值，如果大于0，当空闲的时间大于这个值时，执行移除这个对象操作。默认值是1000L * 60L * 30L;即30分钟。这个参数是强制性的，只要空闲时间超过这个值，就会移除。
	softMinEvictableIdleTimeMillis： 对象最小的空间时间，如果小于等于0，取Long的最大值，如果大于0，当对象的空闲时间超过这个值，并且当前空闲对象的数量大于最小空闲数量(minIdle)时，执行移除操作。这个和上面的minEvictableIdleTimeMillis的区别是，它会保留最小的空闲对象数量。而上面的不会，是强制性移除的。默认值是-1；
	numTestsPerEvictionRun： 检测空闲对象线程每次检测的空闲对象的数量。默认值是3；如果这个值小于0,则每次检测的空闲对象数量等于当前空闲对象数量除以这个值的绝对值，并对结果向上取整。
	testOnCreate： 在创建对象时检测对象是否有效，true是，默认值是false。
	testOnBorrow： 在从对象池获取对象时是否检测对象有效，true是；默认值是false。
	testOnReturn： 在向对象池中归还对象时是否检测对象有效，true是，默认值是false。
	testWhileIdle： 在检测空闲对象线程检测到对象不需要移除时，是否检测对象的有效性。true是，默认值是false。
	timeBetweenEvictionRunsMillis： 空闲对象检测线程的执行周期，即多长时候执行一次空闲对象检测。单位是毫秒数。如果小于等于0，则不执行检测线程。默认值是-1;
	blockWhenExhausted： 当对象池没有空闲对象时，新的获取对象的请求是否阻塞。true阻塞。默认值是true;
	maxTotal： 对象池中管理的最多对象个数。默认值是8。
	maxIdle： 对象池中最大的空闲对象个数。默认值是8。
	minIdle： 对象池中最小的空闲对象个数。默认值是0。
	
下面写一个Demo来具体展示他的用法：
假设DBConnection这个类会被频繁使用，他的创建需要消耗一定的时间，现在让对象池来创建并维护这个类。
public class DBConnection {
	
	public DBConnection() {
		try {
			// Suppose it takes a lot of time to create an object.
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public void mockQuery() {
		System.out.println(this.toString());
	}
}

再定义一个池化对象工厂，这个类会创建对象，然后交给连接池去管理，每个方法的功能上面都有详解：
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.DefaultPooledObject;
public class PooledDBConnectionFactory implements PooledObjectFactory<DBConnection> {
	@Override
	public PooledObject<DBConnection> makeObject() throws Exception {
		return new DefaultPooledObject<DBConnection>(new DBConnection());
	}
	@Override
	public void destroyObject(PooledObject<DBConnection> p) throws Exception {
		if(p != null) {
			p.getObject().close();
		}
	}
	@Override
	public boolean validateObject(PooledObject<DBConnection> p) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public void activateObject(PooledObject<DBConnection> p) throws Exception {
		// TODO Auto-generated method stub
	}
	@Override
	public void passivateObject(PooledObject<DBConnection> p) throws Exception {
		// TODO Auto-generated method stub
		
	}
}

最后写一个main方法来测试一下：
import java.util.Random;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
public class SimplePoolTest {
	public static void main(String[] args) throws Exception {
		GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();	//定义一个对象池的配置类
		poolConfig.setMaxIdle(15);
		poolConfig.setMaxTotal(20);
		poolConfig.setMaxWaitMillis(5000);
		GenericObjectPool<DBConnection> pool = new GenericObjectPool<>(new PooledDBConnectionFactory(), poolConfig);	//初始化对象池，将池化对象工厂和配置类传入
		for(int i=0; i<10; i++) {	//创建十个线程
			new Thread(new Runnable() {
				@Override
				public void run() {
					try {
						Thread.sleep(new Random().nextInt(3000));
						DBConnection connection = pool.borrowObject();	//每个线程都会从对象池中获取一个对象
						connection.mockQuery();			//使用对象
						pool.returnObject(connection);	//归还对象到对象池中
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}).start();
		}
//		pool.close();	//关闭池，这里注释掉是因为避免池关闭了，上面的线程还在拿对象，实际应用中会在适当的地方关闭池。
	}
}

总结一下：
1、某个对象会被频繁的使用，但是其创建过程比较耗时，就可以考虑用对象池来存放他
2、创建一个实现PooledObjectFactory的具体池化对象工厂来生产对象
3、创建一个对象池配置类，设置池属性，可以根据需要定制对象池
4、创建一个对象池，管理池中对象的输出和回收

redis的连接池和数据库连接池都是使用commons-pool2中的对象池来构建
