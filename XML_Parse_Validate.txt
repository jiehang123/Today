本文主题：几种xml的解析方式与使用xsd验证xml的方法

XML的解析方式分为四种：1、DOM解析；2、SAX解析；3、JDOM解析；4、DOM4J解析

一、SAX解析
SAX解析方式会逐行地去扫描XML文档，当遇到标签时会触发解析处理器，采用事件处理的方式解析XML (Simple API for XML) ，不是官方标准，但它是 XML 社区事实上的标准，几乎所有的 XML 解析器都支持它。
优点是：在读取文档的同时即可对XML进行处理，不必等到文档加载结束，相对快捷。不需要加载进内存，因此不存在占用内存的问题，可以解析超大XML。
缺点是：只能用来读取XML中数据，无法进行增删改

SAX解析可分四个步骤进行： 
1、得到xml文件对应的资源，可以是xml的输入流，文件和uri 
2、得到SAX解析工厂（SAXParserFactory） 
3、由解析工厂生产一个SAX解析器（SAXParser） 
4、传入输入流和handler给解析器，调用parse()解析

public static void main(String[] args) throws Exception {
        //1.创建解析工厂
		SAXParserFactory factory=SAXParserFactory.newInstance();
        //2.得到解析器
        SAXParser sp=factory.newSAXParser();
        //3得到解读器
        XMLReader reader=sp.getXMLReader();
        //设置内容处理器
        reader.setContentHandler(new ListHandler());
        //读取xml的文档内容
        reader.parse("src/Book.xml");
    }
}

新建一个ListHandler类，这个类需要继承DefaultHandler类或者实现ContentHandler接口。该类是SAX解析的核心所在，我们要重写以下几个我们关心的方法。 
1、startDocument()：文档解析开始时调用，该方法只会调用一次 
2、startElement(String uri, String localName, String qName, Attributes attributes):标签（节点）解析开始时调用
	uri：xml文档的命名空间
	localName：标签的名字
	qName：带命名空间的标签的名字
	attributes：标签的属性集
3、characters(char[] ch, int start, int length)：解析标签的内容的时候调用
	ch：当前读取到的TextNode(文本节点)的字节数组
	start：字节开始的位置，为0则读取全部
	length：当前TextNode的长度
4、endElement(String uri, String localName, String qName)：标签（节点）解析结束后调用 
5、endDocument()：文档解析结束后调用，该方法只会调用一次

ListHandler代码：
class ListHandler implements ContentHandler{
    /**
     * 当读取到第一个元素时开始做什么
     */
    @Override
    public void startElement(String uri, String localName, String qName,
            Attributes atts) throws SAXException {
        System.out.print("<"+qName);
        for(int i=0;atts!=null&&i<atts.getLength();i++){
            String attName=atts.getQName(i);
            String attValueString=atts.getValue(i);
            System.out.print(" "+attName+"="+attValueString);
            System.out.print(">");
        }

    }
    /**
     * 表示读取到第一个元素结尾时做什么
     */
    @Override
    public void endElement(String uri, String localName, String qName)
            throws SAXException {
        System.out.print("</"+qName+">");

    }
    /**
     * 表示读取字符串时做什么
     */
    @Override
    public void characters(char[] ch, int start, int length)
            throws SAXException {
        System.out.print(new String(ch,start,length));

    }
	......
}







方法一：
[java] view plain copy
private boolean validateXMLByXSD(String xml) throws SAXException, UnsupportedEncodingException  
  
    {  
  
        //建立schema工厂  
  
        SchemaFactory schemaFactory = SchemaFactory.newInstance("http://www.w3.org/2001/XMLSchema");  
  
        //建立验证文档文件对象，利用此文件对象所封装的文件进行schema验证  
  
        File schemaFile = new File(EAPConfig.web_root_path + "soc/Resources/eventRelevance/rce.xsd");  
  
        //利用schema工厂，接收验证文档文件对象生成Schema对象  
  
        Schema schema = schemaFactory.newSchema(schemaFile);  
  
        //通过Schema产生针对于此Schema的验证器，利用schenaFile进行验证  
  
        Validator validator = schema.newValidator();  
  
        //得到验证的数据源  
  
        Source source = new StreamSource("D:\\test.xml");  
  
        //开始验证，成功输出success!!!，失败输出fail  
  
//参数还可以用文件的String转为的inputstreamnew //ByteArrayInputStream(text.getBytes("UTF-8"));  
  
        try {  
  
            validator.validate(source);  
  
        }  
  
        catch (Exception ex) {  
  
            System.out.println( ex.getMessage());     
  
                     ex.printStackTrace();     
  
            return false;  
  
        }  
  
        return true;  
  
}  
方法二：需要引入dom4j.jar

[java] view plain copy
/**  
 
     * 通过XSD（XML Schema）校验XML  
 
     */   
  
    public static void validateXMLByXSD() {   
  
        String xmlFileName = "/test.xml";   
  
        String xsdFileName = "/rce.xsd";   
  
        try {   
  
            //创建默认的XML错误处理器   
  
            XMLErrorHandler errorHandler = new XMLErrorHandler();   
  
            //获取基于 SAX 的解析器的实例   
  
            SAXParserFactory factory = SAXParserFactory.newInstance();   
  
            //解析器在解析时验证 XML 内容。   
  
            factory.setValidating(true);   
  
            //指定由此代码生成的解析器将提供对 XML 名称空间的支持。   
  
            factory.setNamespaceAware(true);   
  
            //使用当前配置的工厂参数创建 SAXParser 的一个新实例。   
  
            SAXParser parser = factory.newSAXParser();   
  
            //创建一个读取工具   
  
            SAXReader xmlReader = new SAXReader();   
  
            //获取要校验xml文档实例   
  
            Document xmlDocument = (Document) xmlReader.read(new File(xmlFileName));   
  
            //设置 XMLReader 的基础实现中的特定属性。核心功能和属性列表可以在 http://sax.sourceforge.net/?selected=get-set 中找到。   
  
            parser.setProperty(   
  
                    "http://java.sun.com/xml/jaxp/properties/schemaLanguage",   
  
                    "http://www.w3.org/2001/XMLSchema");   
  
            parser.setProperty(   
  
                    "http://java.sun.com/xml/jaxp/properties/schemaSource",   
  
                    "file:" + xsdFileName);   
  
            //创建一个SAXValidator校验工具，并设置校验工具的属性   
  
            SAXValidator validator = new SAXValidator(parser.getXMLReader());   
  
            //设置校验工具的错误处理器，当发生错误时，可以从处理器对象中得到错误信息。   
  
            validator.setErrorHandler(errorHandler);   
  
            //校验   
  
            validator.validate(xmlDocument);   
  
            XMLWriter writer = new XMLWriter(OutputFormat.createPrettyPrint());   
  
            //如果错误信息不为空，说明校验失败，打印错误信息   
  
            if (errorHandler.getErrors().hasContent()) {   
  
                System.out.println("XML文件通过XSD文件校验失败！");   
  
                writer.write(errorHandler.getErrors());   
  
            } else {   
  
                System.out.println("Good! XML文件通过XSD文件校验成功！");   
  
            }   
  
        } catch (Exception ex) {   
  
            System.out.println("XML文件: " + xmlFileName + " 通过XSD文件:" + xsdFileName + "检验失败。\n原因： " + ex.getMessage());   
  
            ex.printStackTrace();   
  
        }  
